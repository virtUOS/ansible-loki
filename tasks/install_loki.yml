---

- name: create loki user
  user:
    name: loki
    state: present

- name: create loki directory
  file:
    path: /etc/loki
    state: directory
    owner: loki
    group: loki
    mode: '0744'

- name: create loki config
  template:
    src: '{{ loki_config_template }}'
    dest: /etc/loki/loki_config.yml
    owner: loki
    group: loki
    mode: '0644'
  notify: restart loki

- name: get checksum
  block:
    - name: get sha256sums-file link
      set_fact:
        _sha256_uri: '{{ item.browser_download_url }}'
      when: "'SHA256SUMS' in item.name"
      with_items: '{{ json_reponse.json.assets }}'
    - name: get checksum from github
      set_fact:
        _checksums: "{{ lookup('url', _sha256_uri, wantlist=True) | list }}"
    - name: get checksum for amd64
      set_fact:
        loki_checksum: "{{ item.split(' ')[0] }}"
      with_items: "{{ _checksums }}"
      when: "'loki-linux-amd64.zip' in item"
  when: >
    loki_remote_version["failed"]
    or loki_remote_version["content"] | b64decode != json_reponse.json.tag_name

- name: download and install loki
  block:
    - name: get loki download link
      set_fact:
        _loki_uri: '{{ item.browser_download_url }}'
      when: "'loki-linux-amd64.zip' in item.name"
      with_items: '{{ json_reponse.json.assets }}'
    - name: download archive
      get_url:
        url: '{{ _loki_uri }}'
        dest: /tmp/loki-linux-amd64.zip
        checksum: 'sha256:{{ loki_checksum }}'
        mode: '0644'
    - name: unpack archive
      unarchive:
        remote_src: true
        src: /tmp/loki-linux-amd64.zip
        dest: /tmp
    - name: move loki
      copy:
        remote_src: true
        src: /tmp/loki-linux-amd64
        dest: /usr/local/bin/loki
        owner: root
        group: root
        mode: '0755'
    - name: clean up temp
      file:
        path: '{{ item }}'
        state: absent
      with_items:
        - /tmp/loki-linux-amd64.zip
        - /tmp/loki-linux-amd64
    - name: create binary version file
      template:
        src: loki_version.j2
        dest: /etc/loki/loki_version
        owner: loki
        group: loki
        mode: '0644'
  when: >
    loki_remote_version["failed"]
    or loki_remote_version["content"] | b64decode != json_reponse.json.tag_name
  notify: restart loki

- name: copy service file
  copy:
    src: loki.service
    dest: /etc/systemd/system/
    mode: '0644'
    owner: root
    group: root
  notify: restart loki

- name: start and enable loki
  service:
    name: loki
    state: started
    enabled: true
